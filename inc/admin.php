<?php

if (!class_exists('WP_List_Table')) {
    require_once ABSPATH . 'wp-admin/includes/class-wp-list-table.php';
}

function kinza_admin_style() {
    wp_enqueue_style('admin-styles', get_stylesheet_directory_uri().'/styles/admin.css');
}
add_action('admin_enqueue_scripts', 'kinza_admin_style');

function feedback_admin_menu(): void
{
    global $wpdb;
    $table_name = $wpdb->prefix . 'feedback';
    $unread_count = $wpdb->get_var("SELECT COUNT(*) FROM $table_name WHERE is_read = 0");

    add_menu_page(
        'Запросы',
        'Запросы' . (
        $unread_count > 0
            ? ' <span class="update-plugins count-' . $unread_count . '"><span class="plugin-count">' . $unread_count . '</span></span>'
            : ''
        ),
        'manage_options',
        'feedback-requests',
        'display_feedback_requests'
    );
}

add_action('admin_menu', 'feedback_admin_menu');

class FeedbackListTable extends WP_List_Table
{
    protected function single_row_columns($item)
    {
        parent::single_row_columns($item); // TODO: Change the autogenerated stub
    }

    public function __construct()
    {
        parent::__construct([
            'singular' => 'feedback',
            'plural' => 'feedbacks',
            'ajax' => true
        ]);
    }

    public function get_columns(): array
    {
        return [
            'cb' => '<input type="checkbox" />',
            'service' => 'Услуга',
            'name' => 'Имя',
            'email' => 'Email',
            'message' => 'Сообщение',
            'is_read' => 'Прочитано',
            'submitted_at' => 'Дата',
        ];
    }

    public function get_bulk_actions(): array
    {
        return [
            'mark_read' => 'Отметить как прочитанное',
            'mark_unread' => 'Отметить как непрочитанное',
            'delete' => 'Удалить'
        ];
    }

    public function prepare_items(): void
    {
        global $wpdb;
        $table_name = $wpdb->prefix . 'feedback';

        $per_page = 100;
        $current_page = $this->get_pagenum();

        $total_items = $wpdb->get_var("SELECT COUNT(*) FROM $table_name");

        $data = $wpdb->get_results(
            $wpdb->prepare(
                "SELECT * FROM $table_name ORDER BY id DESC LIMIT %d OFFSET %d",
                $per_page,
                ($current_page - 1) * $per_page
            ),
            ARRAY_A
        );

        $this->items = $data;
        $this->set_pagination_args([
            'total_items' => $total_items,
            'per_page' => $per_page,
        ]);

        $this->_column_headers = [$this->get_columns(), [], []];
    }

    public function column_default($item, $column_name)
    {
        return $item[$column_name] ?? '';
    }

    public function column_cb($item)
    {
        return sprintf('<input type="checkbox" name="bulk-ids[]" value="%s" />', $item['id']);
    }

    public function column_is_read($item): string
    {
        $checked = checked($item['is_read'], 1, false);
        return "<input type='checkbox' disabled $checked>";
    }

//    public function single_row($item): array
//    {
//        if ($item['is_read'] == 0) {
//            return ['unread-feedback'];
//        }
//        return [];
//    }

    public function process_bulk_action()
    {
        global $wpdb;
        $table_name = $wpdb->prefix . 'feedback';

        if (isset($_POST['bulk-ids']) && is_array($_POST['bulk-ids'])) {
            $ids = array_map('intval', $_POST['bulk-ids']);
            $ids_placeholder = implode(',', array_fill(0, count($ids), '%d'));

            if ('delete' === $this->current_action()) {
                $wpdb->query($wpdb->prepare("DELETE FROM $table_name WHERE id IN ($ids_placeholder)", ...$ids));
            } elseif ('mark_read' === $this->current_action()) {
                $wpdb->query($wpdb->prepare("UPDATE $table_name SET is_read = 1 WHERE id IN ($ids_placeholder)", ...$ids));
            } elseif ('mark_unread' === $this->current_action()) {
                $wpdb->query($wpdb->prepare("UPDATE $table_name SET is_read = 0 WHERE id IN ($ids_placeholder)", ...$ids));
            }
        }
    }
}

// Отображение запросов в админке
function display_feedback_requests(): void
{
    $feedback_table = new FeedbackListTable();
    $feedback_table->process_bulk_action();
    $feedback_table->prepare_items();
    ?>
    <div class="wrap">
        <h1>Запросы</h1>
        <form method="post">
            <?php $feedback_table->display(); ?>
        </form>
    </div>
    <?php
}

// Обработка изменения статуса запроса
function mark_feedback_as_read(): void
{
    if (isset($_GET['mark_as_read'])) {
        global $wpdb;
        $table_name = $wpdb->prefix . 'feedback';
        $id = intval($_GET['mark_as_read']);

        $wpdb->update(
            $table_name,
            ['is_read' => 1],
            ['id' => $id]
        );

        wp_redirect(remove_query_arg('mark_as_read'));
        exit;
    }
}

add_action('admin_init', 'mark_feedback_as_read');
